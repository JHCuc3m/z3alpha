(if (> size 13) (if (> num-consts 29) (if (> num-consts 45) (if (> num-exprs 244) (if (> size 235) (if (> num-exprs 15006) (if (> num-exprs 139876) (then (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) (if (> num-consts 0) (if (> size 6) (if (> num-exprs 18657) (if (> size 235) (if (> size 9436) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> num-exprs 102679) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (if (> num-exprs 39950) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))))) (if (> size 283) (if (> num-exprs 6799) (if (> size 2715) (if (> num-consts 70) (if (> num-exprs 15006) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))) (if (> size 2715) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 565) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-exprs 244) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 35) (if (> size 235) (then propagate-values (using-params smt :random_seed 0)) (if (> num-consts 45) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))) (if (> size 95) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-consts 45) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 29) (if (> num-consts 35) (then propagate-values (using-params smt :random_seed 0)) (then propagate-values (using-params smt :random_seed 0))) (if (> num-consts 16) (if (> num-consts 19) (if (> size 32) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> size 32) (then propagate-values (using-params smt :random_seed 0)) (if (> num-exprs 26) (if (> num-exprs 64) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))))))))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)))) (if (> num-exprs 102679) (then (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) (if (> num-consts 0) (if (> size 6) (if (> num-exprs 18657) (if (> size 235) (if (> size 9436) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> num-exprs 102679) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (if (> num-exprs 39950) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))))) (if (> size 283) (if (> num-exprs 6799) (if (> size 2715) (if (> num-consts 70) (if (> num-exprs 15006) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))) (if (> size 2715) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 565) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-exprs 244) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 35) (if (> size 235) (then propagate-values (using-params smt :random_seed 0)) (if (> num-consts 45) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))) (if (> size 95) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-consts 45) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 29) (if (> num-consts 35) (then propagate-values (using-params smt :random_seed 0)) (then propagate-values (using-params smt :random_seed 0))) (if (> num-consts 16) (if (> num-consts 19) (if (> size 32) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> size 32) (then propagate-values (using-params smt :random_seed 0)) (if (> num-exprs 26) (if (> num-exprs 64) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))))))))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)))) (then (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) (if (> num-consts 0) (if (> size 6) (if (> num-exprs 18657) (if (> size 235) (if (> size 9436) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> num-exprs 102679) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (if (> num-exprs 39950) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))))) (if (> size 283) (if (> num-exprs 6799) (if (> size 2715) (if (> num-consts 70) (if (> num-exprs 15006) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))) (if (> size 2715) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 565) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-exprs 244) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 35) (if (> size 235) (then propagate-values (using-params smt :random_seed 0)) (if (> num-consts 45) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))) (if (> size 95) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-consts 45) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 29) (if (> num-consts 35) (then propagate-values (using-params smt :random_seed 0)) (then propagate-values (using-params smt :random_seed 0))) (if (> num-consts 16) (if (> num-consts 19) (if (> size 32) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> size 32) (then propagate-values (using-params smt :random_seed 0)) (if (> num-exprs 26) (if (> num-exprs 64) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))))))))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)))))) (if (> num-exprs 8010) (then (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) (if (> num-consts 0) (if (> size 6) (if (> num-exprs 18657) (if (> size 235) (if (> size 9436) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> num-exprs 102679) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (if (> num-exprs 39950) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))))) (if (> size 283) (if (> num-exprs 6799) (if (> size 2715) (if (> num-consts 70) (if (> num-exprs 15006) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))) (if (> size 2715) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 565) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-exprs 244) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 35) (if (> size 235) (then propagate-values (using-params smt :random_seed 0)) (if (> num-consts 45) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))) (if (> size 95) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-consts 45) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 29) (if (> num-consts 35) (then propagate-values (using-params smt :random_seed 0)) (then propagate-values (using-params smt :random_seed 0))) (if (> num-consts 16) (if (> num-consts 19) (if (> size 32) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> size 32) (then propagate-values (using-params smt :random_seed 0)) (if (> num-exprs 26) (if (> num-exprs 64) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))))))))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)))) (if (> size 3705) (then (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) (if (> num-consts 0) (if (> size 6) (if (> num-exprs 18657) (if (> size 235) (if (> size 9436) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> num-exprs 102679) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (if (> num-exprs 39950) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))))) (if (> size 283) (if (> num-exprs 6799) (if (> size 2715) (if (> num-consts 70) (if (> num-exprs 15006) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))) (if (> size 2715) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 565) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-exprs 244) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 35) (if (> size 235) (then propagate-values (using-params smt :random_seed 0)) (if (> num-consts 45) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))) (if (> size 95) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-consts 45) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 29) (if (> num-consts 35) (then propagate-values (using-params smt :random_seed 0)) (then propagate-values (using-params smt :random_seed 0))) (if (> num-consts 16) (if (> num-consts 19) (if (> size 32) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> size 32) (then propagate-values (using-params smt :random_seed 0)) (if (> num-exprs 26) (if (> num-exprs 64) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))))))))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)))) (if (> size 2715) (then (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) (if (> num-consts 0) (if (> size 6) (if (> num-exprs 18657) (if (> size 235) (if (> size 9436) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> num-exprs 102679) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (if (> num-exprs 39950) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))))) (if (> size 283) (if (> num-exprs 6799) (if (> size 2715) (if (> num-consts 70) (if (> num-exprs 15006) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))) (if (> size 2715) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 565) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-exprs 244) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 35) (if (> size 235) (then propagate-values (using-params smt :random_seed 0)) (if (> num-consts 45) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))) (if (> size 95) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-consts 45) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 29) (if (> num-consts 35) (then propagate-values (using-params smt :random_seed 0)) (then propagate-values (using-params smt :random_seed 0))) (if (> num-consts 16) (if (> num-consts 19) (if (> size 32) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> size 32) (then propagate-values (using-params smt :random_seed 0)) (if (> num-exprs 26) (if (> num-exprs 64) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))))))))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)))) (if (> num-exprs 635) (if (> size 1560) (then (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) (if (> num-consts 0) (if (> size 6) (if (> num-exprs 18657) (if (> size 235) (if (> size 9436) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> num-exprs 102679) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (if (> num-exprs 39950) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))))) (if (> size 283) (if (> num-exprs 6799) (if (> size 2715) (if (> num-consts 70) (if (> num-exprs 15006) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))) (if (> size 2715) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 565) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-exprs 244) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 35) (if (> size 235) (then propagate-values (using-params smt :random_seed 0)) (if (> num-consts 45) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))) (if (> size 95) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-consts 45) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 29) (if (> num-consts 35) (then propagate-values (using-params smt :random_seed 0)) (then propagate-values (using-params smt :random_seed 0))) (if (> num-consts 16) (if (> num-consts 19) (if (> size 32) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> size 32) (then propagate-values (using-params smt :random_seed 0)) (if (> num-exprs 26) (if (> num-exprs 64) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))))))))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)))) (if (> num-consts 565) (then (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) (if (> num-consts 0) (if (> size 6) (if (> num-exprs 18657) (if (> size 235) (if (> size 9436) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> num-exprs 102679) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (if (> num-exprs 39950) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))))) (if (> size 283) (if (> num-exprs 6799) (if (> size 2715) (if (> num-consts 70) (if (> num-exprs 15006) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))) (if (> size 2715) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 565) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-exprs 244) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 35) (if (> size 235) (then propagate-values (using-params smt :random_seed 0)) (if (> num-consts 45) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))) (if (> size 95) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-consts 45) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 29) (if (> num-consts 35) (then propagate-values (using-params smt :random_seed 0)) (then propagate-values (using-params smt :random_seed 0))) (if (> num-consts 16) (if (> num-consts 19) (if (> size 32) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> size 32) (then propagate-values (using-params smt :random_seed 0)) (if (> num-exprs 26) (if (> num-exprs 64) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))))))))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)))) (then (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) (if (> num-consts 0) (if (> size 6) (if (> num-exprs 18657) (if (> size 235) (if (> size 9436) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> num-exprs 102679) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (if (> num-exprs 39950) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))))) (if (> size 283) (if (> num-exprs 6799) (if (> size 2715) (if (> num-consts 70) (if (> num-exprs 15006) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))) (if (> size 2715) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 565) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-exprs 244) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 35) (if (> size 235) (then propagate-values (using-params smt :random_seed 0)) (if (> num-consts 45) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))) (if (> size 95) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-consts 45) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 29) (if (> num-consts 35) (then propagate-values (using-params smt :random_seed 0)) (then propagate-values (using-params smt :random_seed 0))) (if (> num-consts 16) (if (> num-consts 19) (if (> size 32) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> size 32) (then propagate-values (using-params smt :random_seed 0)) (if (> num-exprs 26) (if (> num-exprs 64) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))))))))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)))))) (then (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) (if (> num-consts 0) (if (> size 6) (if (> num-exprs 18657) (if (> size 235) (if (> size 9436) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> num-exprs 102679) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (if (> num-exprs 39950) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))))) (if (> size 283) (if (> num-exprs 6799) (if (> size 2715) (if (> num-consts 70) (if (> num-exprs 15006) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))) (if (> size 2715) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 565) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-exprs 244) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 35) (if (> size 235) (then propagate-values (using-params smt :random_seed 0)) (if (> num-consts 45) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))) (if (> size 95) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-consts 45) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 29) (if (> num-consts 35) (then propagate-values (using-params smt :random_seed 0)) (then propagate-values (using-params smt :random_seed 0))) (if (> num-consts 16) (if (> num-consts 19) (if (> size 32) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> size 32) (then propagate-values (using-params smt :random_seed 0)) (if (> num-exprs 26) (if (> num-exprs 64) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))))))))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))))))))) (if (> num-exprs 2617) (if (> num-exprs 18657) (then (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) (if (> num-consts 0) (if (> size 6) (if (> num-exprs 18657) (if (> size 235) (if (> size 9436) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> num-exprs 102679) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (if (> num-exprs 39950) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))))) (if (> size 283) (if (> num-exprs 6799) (if (> size 2715) (if (> num-consts 70) (if (> num-exprs 15006) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))) (if (> size 2715) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 565) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-exprs 244) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 35) (if (> size 235) (then propagate-values (using-params smt :random_seed 0)) (if (> num-consts 45) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))) (if (> size 95) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-consts 45) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 29) (if (> num-consts 35) (then propagate-values (using-params smt :random_seed 0)) (then propagate-values (using-params smt :random_seed 0))) (if (> num-consts 16) (if (> num-consts 19) (if (> size 32) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> size 32) (then propagate-values (using-params smt :random_seed 0)) (if (> num-exprs 26) (if (> num-exprs 64) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))))))))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)))) (then (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) (if (> num-consts 0) (if (> size 6) (if (> num-exprs 18657) (if (> size 235) (if (> size 9436) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> num-exprs 102679) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (if (> num-exprs 39950) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))))) (if (> size 283) (if (> num-exprs 6799) (if (> size 2715) (if (> num-consts 70) (if (> num-exprs 15006) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))) (if (> size 2715) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 565) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-exprs 244) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 35) (if (> size 235) (then propagate-values (using-params smt :random_seed 0)) (if (> num-consts 45) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))) (if (> size 95) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-consts 45) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 29) (if (> num-consts 35) (then propagate-values (using-params smt :random_seed 0)) (then propagate-values (using-params smt :random_seed 0))) (if (> num-consts 16) (if (> num-consts 19) (if (> size 32) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> size 32) (then propagate-values (using-params smt :random_seed 0)) (if (> num-exprs 26) (if (> num-exprs 64) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))))))))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))))) (then (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) (if (> num-consts 0) (if (> size 6) (if (> num-exprs 18657) (if (> size 235) (if (> size 9436) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> num-exprs 102679) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (if (> num-exprs 39950) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))))) (if (> size 283) (if (> num-exprs 6799) (if (> size 2715) (if (> num-consts 70) (if (> num-exprs 15006) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))) (if (> size 2715) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 565) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-exprs 244) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 35) (if (> size 235) (then propagate-values (using-params smt :random_seed 0)) (if (> num-consts 45) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))) (if (> size 95) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-consts 45) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 29) (if (> num-consts 35) (then propagate-values (using-params smt :random_seed 0)) (then propagate-values (using-params smt :random_seed 0))) (if (> num-consts 16) (if (> num-consts 19) (if (> size 32) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> size 32) (then propagate-values (using-params smt :random_seed 0)) (if (> num-exprs 26) (if (> num-exprs 64) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))))))))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)))))) (then (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) (if (> num-consts 0) (if (> size 6) (if (> num-exprs 18657) (if (> size 235) (if (> size 9436) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> num-exprs 102679) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (if (> num-exprs 39950) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))))) (if (> size 283) (if (> num-exprs 6799) (if (> size 2715) (if (> num-consts 70) (if (> num-exprs 15006) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))) (if (> size 2715) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 565) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-exprs 244) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 35) (if (> size 235) (then propagate-values (using-params smt :random_seed 0)) (if (> num-consts 45) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))) (if (> size 95) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-consts 45) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 29) (if (> num-consts 35) (then propagate-values (using-params smt :random_seed 0)) (then propagate-values (using-params smt :random_seed 0))) (if (> num-consts 16) (if (> num-consts 19) (if (> size 32) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> size 32) (then propagate-values (using-params smt :random_seed 0)) (if (> num-exprs 26) (if (> num-exprs 64) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))))))))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))))) (if (> size 95) (then (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) (if (> num-consts 0) (if (> size 6) (if (> num-exprs 18657) (if (> size 235) (if (> size 9436) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> num-exprs 102679) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (if (> num-exprs 39950) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))))) (if (> size 283) (if (> num-exprs 6799) (if (> size 2715) (if (> num-consts 70) (if (> num-exprs 15006) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))) (if (> size 2715) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 565) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-exprs 244) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 35) (if (> size 235) (then propagate-values (using-params smt :random_seed 0)) (if (> num-consts 45) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))) (if (> size 95) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-consts 45) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 29) (if (> num-consts 35) (then propagate-values (using-params smt :random_seed 0)) (then propagate-values (using-params smt :random_seed 0))) (if (> num-consts 16) (if (> num-consts 19) (if (> size 32) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> size 32) (then propagate-values (using-params smt :random_seed 0)) (if (> num-exprs 26) (if (> num-exprs 64) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))))))))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)))) (if (> num-exprs 2617) (then (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) (if (> num-consts 0) (if (> size 6) (if (> num-exprs 18657) (if (> size 235) (if (> size 9436) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> num-exprs 102679) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (if (> num-exprs 39950) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))))) (if (> size 283) (if (> num-exprs 6799) (if (> size 2715) (if (> num-consts 70) (if (> num-exprs 15006) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))) (if (> size 2715) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 565) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-exprs 244) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 35) (if (> size 235) (then propagate-values (using-params smt :random_seed 0)) (if (> num-consts 45) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))) (if (> size 95) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-consts 45) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 29) (if (> num-consts 35) (then propagate-values (using-params smt :random_seed 0)) (then propagate-values (using-params smt :random_seed 0))) (if (> num-consts 16) (if (> num-consts 19) (if (> size 32) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> size 32) (then propagate-values (using-params smt :random_seed 0)) (if (> num-exprs 26) (if (> num-exprs 64) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))))))))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)))) (if (> size 69) (then (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) (if (> num-consts 0) (if (> size 6) (if (> num-exprs 18657) (if (> size 235) (if (> size 9436) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> num-exprs 102679) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (if (> num-exprs 39950) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))))) (if (> size 283) (if (> num-exprs 6799) (if (> size 2715) (if (> num-consts 70) (if (> num-exprs 15006) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))) (if (> size 2715) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 565) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-exprs 244) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 35) (if (> size 235) (then propagate-values (using-params smt :random_seed 0)) (if (> num-consts 45) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))) (if (> size 95) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-consts 45) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 29) (if (> num-consts 35) (then propagate-values (using-params smt :random_seed 0)) (then propagate-values (using-params smt :random_seed 0))) (if (> num-consts 16) (if (> num-consts 19) (if (> size 32) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> size 32) (then propagate-values (using-params smt :random_seed 0)) (if (> num-exprs 26) (if (> num-exprs 64) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))))))))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)))) (if (> num-exprs 386) (then (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) (if (> num-consts 0) (if (> size 6) (if (> num-exprs 18657) (if (> size 235) (if (> size 9436) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> num-exprs 102679) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (if (> num-exprs 39950) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))))) (if (> size 283) (if (> num-exprs 6799) (if (> size 2715) (if (> num-consts 70) (if (> num-exprs 15006) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))) (if (> size 2715) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 565) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-exprs 244) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 35) (if (> size 235) (then propagate-values (using-params smt :random_seed 0)) (if (> num-consts 45) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))) (if (> size 95) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-consts 45) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 29) (if (> num-consts 35) (then propagate-values (using-params smt :random_seed 0)) (then propagate-values (using-params smt :random_seed 0))) (if (> num-consts 16) (if (> num-consts 19) (if (> size 32) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> size 32) (then propagate-values (using-params smt :random_seed 0)) (if (> num-exprs 26) (if (> num-exprs 64) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))))))))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)))) (then (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) (if (> num-consts 0) (if (> size 6) (if (> num-exprs 18657) (if (> size 235) (if (> size 9436) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> num-exprs 102679) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (if (> num-exprs 39950) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))))) (if (> size 283) (if (> num-exprs 6799) (if (> size 2715) (if (> num-consts 70) (if (> num-exprs 15006) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))) (if (> size 2715) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 565) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-exprs 244) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 35) (if (> size 235) (then propagate-values (using-params smt :random_seed 0)) (if (> num-consts 45) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))) (if (> size 95) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-consts 45) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 29) (if (> num-consts 35) (then propagate-values (using-params smt :random_seed 0)) (then propagate-values (using-params smt :random_seed 0))) (if (> num-consts 16) (if (> num-consts 19) (if (> size 32) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> size 32) (then propagate-values (using-params smt :random_seed 0)) (if (> num-exprs 26) (if (> num-exprs 64) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))))))))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))))))))) (if (> num-exprs 244) (then (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) (if (> num-consts 0) (if (> size 6) (if (> num-exprs 18657) (if (> size 235) (if (> size 9436) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> num-exprs 102679) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (if (> num-exprs 39950) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))))) (if (> size 283) (if (> num-exprs 6799) (if (> size 2715) (if (> num-consts 70) (if (> num-exprs 15006) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))) (if (> size 2715) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 565) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-exprs 244) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 35) (if (> size 235) (then propagate-values (using-params smt :random_seed 0)) (if (> num-consts 45) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))) (if (> size 95) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-consts 45) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 29) (if (> num-consts 35) (then propagate-values (using-params smt :random_seed 0)) (then propagate-values (using-params smt :random_seed 0))) (if (> num-consts 16) (if (> num-consts 19) (if (> size 32) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> size 32) (then propagate-values (using-params smt :random_seed 0)) (if (> num-exprs 26) (if (> num-exprs 64) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))))))))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)))) (if (> size 69) (then (using-params simplify :arith_lhs false :blast_distinct true :elim_and true :flat true :hoist_ite false :local_ctx false :pull_cheap_ite true :push_ite_arith false :som true) (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct true :elim_and true :flat true :hoist_ite false :local_ctx false :pull_cheap_ite false :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -8 :add_bound_upper 2) (using-params smt :random_seed 175)) (if (> num-consts 16) (if (> size 32) (if (> num-consts 19) (then (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) (if (> num-consts 0) (if (> size 6) (if (> num-exprs 18657) (if (> size 235) (if (> size 9436) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> num-exprs 102679) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (if (> num-exprs 39950) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))))) (if (> size 283) (if (> num-exprs 6799) (if (> size 2715) (if (> num-consts 70) (if (> num-exprs 15006) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))) (if (> size 2715) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 565) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-exprs 244) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 35) (if (> size 235) (then propagate-values (using-params smt :random_seed 0)) (if (> num-consts 45) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))) (if (> size 95) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-consts 45) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 29) (if (> num-consts 35) (then propagate-values (using-params smt :random_seed 0)) (then propagate-values (using-params smt :random_seed 0))) (if (> num-consts 16) (if (> num-consts 19) (if (> size 32) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> size 32) (then propagate-values (using-params smt :random_seed 0)) (if (> num-exprs 26) (if (> num-exprs 64) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))))))))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)))) (then (using-params simplify :arith_lhs false :blast_distinct true :elim_and true :flat true :hoist_ite false :local_ctx false :pull_cheap_ite true :push_ite_arith false :som true) (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct true :elim_and true :flat true :hoist_ite false :local_ctx false :pull_cheap_ite false :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -8 :add_bound_upper 2) (using-params smt :random_seed 175))) (then (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) (if (> num-consts 0) (if (> size 6) (if (> num-exprs 18657) (if (> size 235) (if (> size 9436) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> num-exprs 102679) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (if (> num-exprs 39950) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))))) (if (> size 283) (if (> num-exprs 6799) (if (> size 2715) (if (> num-consts 70) (if (> num-exprs 15006) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))) (if (> size 2715) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 565) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-exprs 244) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 35) (if (> size 235) (then propagate-values (using-params smt :random_seed 0)) (if (> num-consts 45) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))) (if (> size 95) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-consts 45) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 29) (if (> num-consts 35) (then propagate-values (using-params smt :random_seed 0)) (then propagate-values (using-params smt :random_seed 0))) (if (> num-consts 16) (if (> num-consts 19) (if (> size 32) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> size 32) (then propagate-values (using-params smt :random_seed 0)) (if (> num-exprs 26) (if (> num-exprs 64) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))))))))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))))) (if (> size 32) (then (using-params simplify :arith_lhs false :blast_distinct true :elim_and true :flat true :hoist_ite false :local_ctx false :pull_cheap_ite false :push_ite_arith false :som true) (using-params add-bounds :add_bound_lower -2 :add_bound_upper 23) solve-eqs (using-params simplify :arith_lhs false :blast_distinct true :elim_and true :flat true :hoist_ite false :local_ctx false :pull_cheap_ite false :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -2 :add_bound_upper 2) (using-params smt :random_seed 0)) (if (> num-exprs 26) (if (> num-exprs 64) (then (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) (if (> num-consts 0) (if (> size 6) (if (> num-exprs 18657) (if (> size 235) (if (> size 9436) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> num-exprs 102679) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (if (> num-exprs 39950) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))))) (if (> size 283) (if (> num-exprs 6799) (if (> size 2715) (if (> num-consts 70) (if (> num-exprs 15006) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))) (if (> size 2715) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 565) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-exprs 244) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 35) (if (> size 235) (then propagate-values (using-params smt :random_seed 0)) (if (> num-consts 45) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))) (if (> size 95) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-consts 45) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 29) (if (> num-consts 35) (then propagate-values (using-params smt :random_seed 0)) (then propagate-values (using-params smt :random_seed 0))) (if (> num-consts 16) (if (> num-consts 19) (if (> size 32) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> size 32) (then propagate-values (using-params smt :random_seed 0)) (if (> num-exprs 26) (if (> num-exprs 64) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))))))))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)))) (if (> num-consts 9) (then (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) (if (> num-consts 0) (if (> size 6) (if (> num-exprs 18657) (if (> size 235) (if (> size 9436) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> num-exprs 102679) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (if (> num-exprs 39950) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))))) (if (> size 283) (if (> num-exprs 6799) (if (> size 2715) (if (> num-consts 70) (if (> num-exprs 15006) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))) (if (> size 2715) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 565) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-exprs 244) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 35) (if (> size 235) (then propagate-values (using-params smt :random_seed 0)) (if (> num-consts 45) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))) (if (> size 95) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-consts 45) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 29) (if (> num-consts 35) (then propagate-values (using-params smt :random_seed 0)) (then propagate-values (using-params smt :random_seed 0))) (if (> num-consts 16) (if (> num-consts 19) (if (> size 32) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> size 32) (then propagate-values (using-params smt :random_seed 0)) (if (> num-exprs 26) (if (> num-exprs 64) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))))))))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)))) (then (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) (if (> num-consts 0) (if (> size 6) (if (> num-exprs 18657) (if (> size 235) (if (> size 9436) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> num-exprs 102679) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (if (> num-exprs 39950) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))))) (if (> size 283) (if (> num-exprs 6799) (if (> size 2715) (if (> num-consts 70) (if (> num-exprs 15006) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))) (if (> size 2715) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 565) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-exprs 244) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 35) (if (> size 235) (then propagate-values (using-params smt :random_seed 0)) (if (> num-consts 45) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))) (if (> size 95) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-consts 45) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 29) (if (> num-consts 35) (then propagate-values (using-params smt :random_seed 0)) (then propagate-values (using-params smt :random_seed 0))) (if (> num-consts 16) (if (> num-consts 19) (if (> size 32) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> size 32) (then propagate-values (using-params smt :random_seed 0)) (if (> num-exprs 26) (if (> num-exprs 64) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))))))))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)))))) (then (using-params simplify :arith_lhs false :blast_distinct true :elim_and true :flat true :hoist_ite false :local_ctx false :pull_cheap_ite false :push_ite_arith false :som true) (using-params add-bounds :add_bound_lower -2 :add_bound_upper 23) solve-eqs (using-params simplify :arith_lhs false :blast_distinct true :elim_and true :flat true :hoist_ite false :local_ctx false :pull_cheap_ite false :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -2 :add_bound_upper 2) (using-params smt :random_seed 0)))))))) (if (> num-exprs 8010) (if (> num-consts 70) (if (> num-exprs 18657) (then (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) (if (> num-consts 0) (if (> size 6) (if (> num-exprs 18657) (if (> size 235) (if (> size 9436) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> num-exprs 102679) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (if (> num-exprs 39950) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))))) (if (> size 283) (if (> num-exprs 6799) (if (> size 2715) (if (> num-consts 70) (if (> num-exprs 15006) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))) (if (> size 2715) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 565) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-exprs 244) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 35) (if (> size 235) (then propagate-values (using-params smt :random_seed 0)) (if (> num-consts 45) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))) (if (> size 95) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-consts 45) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 29) (if (> num-consts 35) (then propagate-values (using-params smt :random_seed 0)) (then propagate-values (using-params smt :random_seed 0))) (if (> num-consts 16) (if (> num-consts 19) (if (> size 32) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> size 32) (then propagate-values (using-params smt :random_seed 0)) (if (> num-exprs 26) (if (> num-exprs 64) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))))))))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)))) (then (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) (if (> num-consts 0) (if (> size 6) (if (> num-exprs 18657) (if (> size 235) (if (> size 9436) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> num-exprs 102679) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (if (> num-exprs 39950) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))))) (if (> size 283) (if (> num-exprs 6799) (if (> size 2715) (if (> num-consts 70) (if (> num-exprs 15006) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))) (if (> size 2715) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 565) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-exprs 244) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 35) (if (> size 235) (then propagate-values (using-params smt :random_seed 0)) (if (> num-consts 45) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))) (if (> size 95) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-consts 45) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 29) (if (> num-consts 35) (then propagate-values (using-params smt :random_seed 0)) (then propagate-values (using-params smt :random_seed 0))) (if (> num-consts 16) (if (> num-consts 19) (if (> size 32) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> size 32) (then propagate-values (using-params smt :random_seed 0)) (if (> num-exprs 26) (if (> num-exprs 64) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))))))))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))))) (then (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) (if (> num-consts 0) (if (> size 6) (if (> num-exprs 18657) (if (> size 235) (if (> size 9436) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> num-exprs 102679) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (if (> num-exprs 39950) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))))) (if (> size 283) (if (> num-exprs 6799) (if (> size 2715) (if (> num-consts 70) (if (> num-exprs 15006) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))) (if (> size 2715) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 565) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-exprs 244) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 35) (if (> size 235) (then propagate-values (using-params smt :random_seed 0)) (if (> num-consts 45) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))) (if (> size 95) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-consts 45) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 29) (if (> num-consts 35) (then propagate-values (using-params smt :random_seed 0)) (then propagate-values (using-params smt :random_seed 0))) (if (> num-consts 16) (if (> num-consts 19) (if (> size 32) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> size 32) (then propagate-values (using-params smt :random_seed 0)) (if (> num-exprs 26) (if (> num-exprs 64) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))))))))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))))) (then (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) (if (> num-consts 0) (if (> size 6) (if (> num-exprs 18657) (if (> size 235) (if (> size 9436) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> num-exprs 102679) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (if (> num-exprs 39950) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))))) (if (> size 283) (if (> num-exprs 6799) (if (> size 2715) (if (> num-consts 70) (if (> num-exprs 15006) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))) (if (> size 2715) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 565) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-exprs 244) (if (> num-exprs 2617) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 35) (if (> size 235) (then propagate-values (using-params smt :random_seed 0)) (if (> num-consts 45) (then propagate-values (using-params smt :random_seed 0)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))) (if (> size 95) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))))) (if (> num-consts 45) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (if (> num-consts 29) (if (> num-consts 35) (then propagate-values (using-params smt :random_seed 0)) (then propagate-values (using-params smt :random_seed 0))) (if (> num-consts 16) (if (> num-consts 19) (if (> size 32) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (if (> size 32) (then propagate-values (using-params smt :random_seed 0)) (if (> num-exprs 26) (if (> num-exprs 64) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)) (then propagate-values (using-params smt :random_seed 0))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172)))))))))) (then (using-params add-bounds :add_bound_lower -21 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and true :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 172))) (then (using-params add-bounds :add_bound_lower -2 :add_bound_upper 6) solve-eqs (using-params simplify :arith_lhs false :blast_distinct false :elim_and false :flat false :hoist_ite false :local_ctx true :pull_cheap_ite true :push_ite_arith false :som true) solve-eqs normalize-bounds (using-params add-bounds :add_bound_lower -27 :add_bound_upper 2) propagate-ineqs (using-params add-bounds :add_bound_lower -32 :add_bound_upper 2) (using-params smt :random_seed 91))))))